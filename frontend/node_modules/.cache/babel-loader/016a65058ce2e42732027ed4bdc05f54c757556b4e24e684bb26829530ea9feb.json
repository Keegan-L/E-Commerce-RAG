{"ast":null,"code":"const API_BASE_URL = 'http://localhost:5001/api';\nexport const sendMessage = async (message, chatHistory) => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/chat`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      },\n      body: JSON.stringify({\n        query: message,\n        chat_history: chatHistory\n      })\n    });\n    if (!response.ok) {\n      const errorData = await response.json().catch(() => ({}));\n      throw new Error(errorData.error || `HTTP error! status: ${response.status}`);\n    }\n    return await response.json();\n  } catch (error) {\n    if (error.message.includes('Failed to fetch')) {\n      throw new Error('Could not connect to the server. Please make sure the backend is running on http://localhost:5000');\n    }\n    console.error('Error in sendMessage:', error);\n    throw error;\n  }\n};\nexport const searchParts = async query => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/search`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        query\n      })\n    });\n    if (!response.ok) {\n      throw new Error('Failed to search parts');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error in searchParts:', error);\n    throw error;\n  }\n};\nexport const getPartDetails = async partId => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/part/${partId}`, {\n      method: 'GET'\n    });\n    if (!response.ok) {\n      throw new Error('Failed to get part details');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error in getPartDetails:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["API_BASE_URL","sendMessage","message","chatHistory","response","fetch","method","headers","body","JSON","stringify","query","chat_history","ok","errorData","json","catch","Error","error","status","includes","console","searchParts","getPartDetails","partId"],"sources":["/Users/keeganli/Desktop/Github/Instalily RAG copy/frontend/src/services/api.js"],"sourcesContent":["const API_BASE_URL = 'http://localhost:5001/api';\n\nexport const sendMessage = async (message, chatHistory) => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/chat`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      },\n      body: JSON.stringify({\n        query: message,\n        chat_history: chatHistory\n      }),\n    });\n\n    if (!response.ok) {\n      const errorData = await response.json().catch(() => ({}));\n      throw new Error(errorData.error || `HTTP error! status: ${response.status}`);\n    }\n\n    return await response.json();\n  } catch (error) {\n    if (error.message.includes('Failed to fetch')) {\n      throw new Error('Could not connect to the server. Please make sure the backend is running on http://localhost:5000');\n    }\n    console.error('Error in sendMessage:', error);\n    throw error;\n  }\n};\n\nexport const searchParts = async (query) => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/search`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ query }),\n    });\n\n    if (!response.ok) {\n      throw new Error('Failed to search parts');\n    }\n\n    return await response.json();\n  } catch (error) {\n    console.error('Error in searchParts:', error);\n    throw error;\n  }\n};\n\nexport const getPartDetails = async (partId) => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/part/${partId}`, {\n      method: 'GET',\n    });\n\n    if (!response.ok) {\n      throw new Error('Failed to get part details');\n    }\n\n    return await response.json();\n  } catch (error) {\n    console.error('Error in getPartDetails:', error);\n    throw error;\n  }\n}; "],"mappings":"AAAA,MAAMA,YAAY,GAAG,2BAA2B;AAEhD,OAAO,MAAMC,WAAW,GAAG,MAAAA,CAAOC,OAAO,EAAEC,WAAW,KAAK;EACzD,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGL,YAAY,OAAO,EAAE;MACnDM,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClC,QAAQ,EAAE;MACZ,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACnBC,KAAK,EAAET,OAAO;QACdU,YAAY,EAAET;MAChB,CAAC;IACH,CAAC,CAAC;IAEF,IAAI,CAACC,QAAQ,CAACS,EAAE,EAAE;MAChB,MAAMC,SAAS,GAAG,MAAMV,QAAQ,CAACW,IAAI,CAAC,CAAC,CAACC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;MACzD,MAAM,IAAIC,KAAK,CAACH,SAAS,CAACI,KAAK,IAAI,uBAAuBd,QAAQ,CAACe,MAAM,EAAE,CAAC;IAC9E;IAEA,OAAO,MAAMf,QAAQ,CAACW,IAAI,CAAC,CAAC;EAC9B,CAAC,CAAC,OAAOG,KAAK,EAAE;IACd,IAAIA,KAAK,CAAChB,OAAO,CAACkB,QAAQ,CAAC,iBAAiB,CAAC,EAAE;MAC7C,MAAM,IAAIH,KAAK,CAAC,mGAAmG,CAAC;IACtH;IACAI,OAAO,CAACH,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC7C,MAAMA,KAAK;EACb;AACF,CAAC;AAED,OAAO,MAAMI,WAAW,GAAG,MAAOX,KAAK,IAAK;EAC1C,IAAI;IACF,MAAMP,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGL,YAAY,SAAS,EAAE;MACrDM,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEC;MAAM,CAAC;IAChC,CAAC,CAAC;IAEF,IAAI,CAACP,QAAQ,CAACS,EAAE,EAAE;MAChB,MAAM,IAAII,KAAK,CAAC,wBAAwB,CAAC;IAC3C;IAEA,OAAO,MAAMb,QAAQ,CAACW,IAAI,CAAC,CAAC;EAC9B,CAAC,CAAC,OAAOG,KAAK,EAAE;IACdG,OAAO,CAACH,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC7C,MAAMA,KAAK;EACb;AACF,CAAC;AAED,OAAO,MAAMK,cAAc,GAAG,MAAOC,MAAM,IAAK;EAC9C,IAAI;IACF,MAAMpB,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGL,YAAY,SAASwB,MAAM,EAAE,EAAE;MAC7DlB,MAAM,EAAE;IACV,CAAC,CAAC;IAEF,IAAI,CAACF,QAAQ,CAACS,EAAE,EAAE;MAChB,MAAM,IAAII,KAAK,CAAC,4BAA4B,CAAC;IAC/C;IAEA,OAAO,MAAMb,QAAQ,CAACW,IAAI,CAAC,CAAC;EAC9B,CAAC,CAAC,OAAOG,KAAK,EAAE;IACdG,OAAO,CAACH,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IAChD,MAAMA,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}